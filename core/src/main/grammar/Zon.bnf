/*
 * This file is part of ZigBrains.
 *
 * Copyright (C) 2023-2025 FalsePattern
 * All Rights Reserved
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * ZigBrains is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, only version 3 of the License.
 *
 * ZigBrains is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with ZigBrains. If not, see <https://www.gnu.org/licenses/>.
 */

{
  parserClass="com.falsepattern.zigbrains.zon.parser.ZonParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Zon"
  psiImplClassSuffix="Impl"
  psiPackage="com.falsepattern.zigbrains.zon.psi"
  psiImplPackage="com.falsepattern.zigbrains.zon.psi.impl"

  elementTypeHolderClass="com.falsepattern.zigbrains.zon.psi.ZonTypes"
  elementTypeClass="com.falsepattern.zigbrains.zon.parser.ZonElementType"
  tokenTypeClass="com.falsepattern.zigbrains.zon.parser.ZonTokenType"
  tokens=[
    DOT='.'
    LBRACE='{'
    RBRACE='}'
    EQ='='
    COMMA=','
    COMMENT='comment'
    ID='identifier'
    STRING_LITERAL_SINGLE='string'
    LINE_STRING='multiline string'
    BAD_STRING='unterminated string'
    BOOL_TRUE='true'
    BOOL_FALSE='false'
  ]

  //Mixins
  mixin("entry")="com.falsepattern.zigbrains.zon.psi.impl.mixins.ZonEntryMixinImpl"
  implements("entry")="com.falsepattern.zigbrains.zon.psi.mixins.ZonEntryMixin"

  mixin("identifier")="com.falsepattern.zigbrains.zon.psi.impl.mixins.ZonIdentifierMixinImpl"
  implements("identifier")="com.falsepattern.zigbrains.zon.psi.mixins.ZonIdentifierMixin"
}

zonFile ::= entry

entry ::= DOT LBRACE (list | struct | ()) RBRACE

struct ::= (property | property_placeholder) (COMMA (property_placeholder? property property_placeholder? | property_placeholder))* COMMA?

list ::= value (COMMA value)* COMMA?

property ::= DOT identifier EQ value

identifier ::= ID

property_placeholder ::= DOT? INTELLIJ_COMPLETION_DUMMY

private value ::= entry | boolean | STRING_LITERAL | value_placeholder

value_placeholder ::= INTELLIJ_COMPLETION_DUMMY

boolean ::= BOOL_TRUE | BOOL_FALSE

STRING_LITERAL ::= STRING_LITERAL_SINGLE | LINE_STRING+
