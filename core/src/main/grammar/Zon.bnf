/*
 * This file is part of ZigBrains.
 *
 * Copyright (C) 2023-2025 FalsePattern
 * All Rights Reserved
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * ZigBrains is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, only version 3 of the License.
 *
 * ZigBrains is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with ZigBrains. If not, see <https://www.gnu.org/licenses/>.
 */

{
  parserClass="com.falsepattern.zigbrains.zon.parser.ZonParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Zon"
  psiImplClassSuffix="Impl"
  psiPackage="com.falsepattern.zigbrains.zon.psi"
  psiImplPackage="com.falsepattern.zigbrains.zon.psi.impl"

  elementTypeHolderClass="com.falsepattern.zigbrains.zon.psi.ZonTypes"
  elementTypeClass="com.falsepattern.zigbrains.zon.parser.ZonElementType"
  tokenTypeClass="com.falsepattern.zigbrains.zon.parser.ZonTokenType"
  tokens=[
    LINE_COMMENT='comment'
    DOT='.'
    EQUAL='='
    LBRACE='{'
    RBRACE='}'
    COMMA=','
    KEYWORD_FALSE='false'
    KEYWORD_TRUE='true'
    KEYWORD_NULL='null'
    NUM_NAN='nan'
    NUM_INF='inf'
    CHAR_LITERAL='char literal'
    STRING_LITERAL_SINGLE='string literal'
    STRING_LITERAL_MULTI='multiline string literal'
    FLOAT='float'
    INTEGER='integer'
    IDENTIFIER='identifier'
    BAD_SQUOT='unterminated quote'
    BAD_DQUOT='unterminated double quote'
  ]
}

Root ::= Expr

Expr
::= CHAR_LITERAL
  | StringLiteral
  | DOT IDENTIFIER
  | DOT InitList
  | Bool
  | Number
  | KEYWORD_NULL


InitList
::= LBRACE ZB_InitList_Body RBRACE {pin=1}

private ZB_InitList_Body
::= FieldInit (COMMA ZB_InitList_FieldInit)* COMMA?
  | Expr (COMMA ZB_InitList_Expr)* COMMA?
  | ()

private ZB_InitList_FieldInit ::= FieldInit {recoverWhile="ZB_InitList_Recover"}
private ZB_InitList_Expr ::= Expr {recoverWhile="ZB_InitList_Recover"}

private ZB_InitList_Recover ::= !(COMMA | RBRACE)

FieldInit ::= DOT IDENTIFIER EQUAL Expr

Bool ::= KEYWORD_TRUE | KEYWORD_FALSE

Number ::= FLOAT | INTEGER | NUM_NAN | NUM_INF

StringLiteral ::= STRING_LITERAL_SINGLE | STRING_LITERAL_MULTI